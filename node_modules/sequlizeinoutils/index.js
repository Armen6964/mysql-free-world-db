const Op = require("sequelize").Op;

function getter(model,req,res,includeModels,cb) {
    let options = {where:{}};
    let page = 0;
    let limit = 10;
    let offset = 0;

    if (req.query.limit){ limit = parseInt(req.query.limit); }

    if (req.query.page){
        page = parseInt(req.query.page) - 1;
        offset = page * limit;
        options.offset = offset;
        options.limit = limit;
    }

    if (req.query.filter){
        let filter = {};
        try {
            filter = JSON.parse(req.query.filter);
            for (let key in filter){ options.where[key] = filter[key] }
        }catch (e) {
            cb({error:true,message:e.message});
            return;
        }
    }

    if (req.query.search){
        let search = {};
        try {
            search = JSON.parse(req.query.search);
            for (let key in search){options.where[key] = { [Op.like] : "%"+search[key]+"%"}}
        }catch (e) {
            cb({error:true,message:e.message});
            return;
        }
    }

    if (req.query.id){ options = {where:{}}; options.where.id = req.query.id; }
    if (req.query.append === "all"){ options = includeModels(model,options) }

    if (req.query.order){
        let order = {};
        try {
            order = JSON.parse(req.query.order);
            options.order  = [];
            for (let key in order){ order.push([key,order[key]]);}
        }catch (e) {
            cb({error:true,message:e.message});
            return;
        }
    }

    model.findAll(options).then((results)=>{
        cb({error:false,message:results});
    }).catch((err)=>{
        cb({error:true,message:err.message});
    });
}

function getById(model,id,cb){
    model.findOne({where:{id}}).then((result)=>{
        cb({error:false,message:result})
    }).catch((err)=>{
        cb({error:true,message:err.message})
    });
}

function forceRemove(model,id,cb){
    model.destroy({
        where:{ id }
    }).then((results)=>{
        cb({error:false,message:{message:"deleted",info:results}})
    }).catch((error)=>{
        cb({error:true,message:error.message})
    })
}

function clear(model,cb){
    model.destroy({where:{},truncate:true}).then((results)=>{
        cb({error:false,message:{message:"cleared",info:results}})
    }).catch((err)=>{
        cb({error:true,message:err.message})
    })
}

function removeById(model,id,cb){
    model.findOne({where:{id}}).then((results)=>{
        if (results){
            model.destroy({
                where:{id}
            }).then((data)=>{
                cb({error:false,message:{message:"deleted",info:results}})
            }).catch((error)=>{
                cb({error:false,message:error.message})
            });
        }else{
            cb({error:false,message:{message:"cleared",info:results},status:404})
        }
    }).catch((err)=>{
        cb({error:false,message:err.message})
    })
}

module.exports = {
    getter,
    getById,
    forceRemove,
    removeById
};
